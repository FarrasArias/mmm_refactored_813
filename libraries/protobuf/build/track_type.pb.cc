// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: track_type.proto

#include "track_type.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace midi {
}  // namespace midi
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_track_5ftype_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_track_5ftype_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_track_5ftype_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_track_5ftype_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_track_5ftype_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020track_type.proto\022\004midi*\203\003\n\nTRACK_TYPE\022"
  "\022\n\016OPZ_KICK_TRACK\020\000\022\023\n\017OPZ_SNARE_TRACK\020\001"
  "\022\023\n\017OPZ_HIHAT_TRACK\020\002\022\024\n\020OPZ_SAMPLE_TRAC"
  "K\020\003\022\022\n\016OPZ_BASS_TRACK\020\004\022\022\n\016OPZ_LEAD_TRAC"
  "K\020\005\022\021\n\rOPZ_ARP_TRACK\020\006\022\023\n\017OPZ_CHORD_TRAC"
  "K\020\007\022\022\n\016AUX_DRUM_TRACK\020\010\022\022\n\016AUX_INST_TRAC"
  "K\020\t\022\022\n\016STANDARD_TRACK\020\n\022\027\n\023STANDARD_DRUM"
  "_TRACK\020\013\022\021\n\rSTANDARD_BOTH\020\014\022\032\n\026OPZ_INVAL"
  "ID_DRUM_TRACK\020\r\022\034\n\030OPZ_INVALID_SAMPLE_TR"
  "ACK\020\016\022\032\n\026OPZ_INVALID_BASS_TRACK\020\017\022\023\n\017NUM"
  "_TRACK_TYPES\020\020"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_track_5ftype_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_track_5ftype_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_track_5ftype_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_track_5ftype_2eproto = {
  false, false, descriptor_table_protodef_track_5ftype_2eproto, "track_type.proto", 414,
  &descriptor_table_track_5ftype_2eproto_once, descriptor_table_track_5ftype_2eproto_sccs, descriptor_table_track_5ftype_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_track_5ftype_2eproto::offsets,
  file_level_metadata_track_5ftype_2eproto, 0, file_level_enum_descriptors_track_5ftype_2eproto, file_level_service_descriptors_track_5ftype_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_track_5ftype_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_track_5ftype_2eproto)), true);
namespace midi {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TRACK_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_track_5ftype_2eproto);
  return file_level_enum_descriptors_track_5ftype_2eproto[0];
}
bool TRACK_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace midi
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
