// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: midi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_midi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_midi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "track_type.pb.h"
#include "enum.pb.h"
#include "midi_internal.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_midi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_midi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_midi_2eproto;
namespace midi {
class Bar;
class BarDefaultTypeInternal;
extern BarDefaultTypeInternal _Bar_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Piece;
class PieceDefaultTypeInternal;
extern PieceDefaultTypeInternal _Piece_default_instance_;
class SampleParam;
class SampleParamDefaultTypeInternal;
extern SampleParamDefaultTypeInternal _SampleParam_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class StatusTrack;
class StatusTrackDefaultTypeInternal;
extern StatusTrackDefaultTypeInternal _StatusTrack_default_instance_;
class Track;
class TrackDefaultTypeInternal;
extern TrackDefaultTypeInternal _Track_default_instance_;
}  // namespace midi
PROTOBUF_NAMESPACE_OPEN
template<> ::midi::Bar* Arena::CreateMaybeMessage<::midi::Bar>(Arena*);
template<> ::midi::Event* Arena::CreateMaybeMessage<::midi::Event>(Arena*);
template<> ::midi::Piece* Arena::CreateMaybeMessage<::midi::Piece>(Arena*);
template<> ::midi::SampleParam* Arena::CreateMaybeMessage<::midi::SampleParam>(Arena*);
template<> ::midi::Status* Arena::CreateMaybeMessage<::midi::Status>(Arena*);
template<> ::midi::StatusTrack* Arena::CreateMaybeMessage<::midi::StatusTrack>(Arena*);
template<> ::midi::Track* Arena::CreateMaybeMessage<::midi::Track>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace midi {

enum PolyphonyLevel : int {
  POLYPHONY_ANY = 0,
  POLYPHONY_ONE = 1,
  POLYPHONY_TWO = 2,
  POLYPHONY_THREE = 3,
  POLYPHONY_FOUR = 4,
  POLYPHONY_FIVE = 5,
  POLYPHONY_SIX = 6
};
bool PolyphonyLevel_IsValid(int value);
constexpr PolyphonyLevel PolyphonyLevel_MIN = POLYPHONY_ANY;
constexpr PolyphonyLevel PolyphonyLevel_MAX = POLYPHONY_SIX;
constexpr int PolyphonyLevel_ARRAYSIZE = PolyphonyLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PolyphonyLevel_descriptor();
template<typename T>
inline const std::string& PolyphonyLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PolyphonyLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PolyphonyLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PolyphonyLevel_descriptor(), enum_t_value);
}
inline bool PolyphonyLevel_Parse(
    const std::string& name, PolyphonyLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PolyphonyLevel>(
    PolyphonyLevel_descriptor(), name, value);
}
enum NoteDurationLevel : int {
  DURATION_ANY = 0,
  DURATION_THIRTY_SECOND = 1,
  DURATION_SIXTEENTH = 2,
  DURATION_EIGHTH = 3,
  DURATION_QUARTER = 4,
  DURATION_HALF = 5,
  DURATION_WHOLE = 6
};
bool NoteDurationLevel_IsValid(int value);
constexpr NoteDurationLevel NoteDurationLevel_MIN = DURATION_ANY;
constexpr NoteDurationLevel NoteDurationLevel_MAX = DURATION_WHOLE;
constexpr int NoteDurationLevel_ARRAYSIZE = NoteDurationLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NoteDurationLevel_descriptor();
template<typename T>
inline const std::string& NoteDurationLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NoteDurationLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NoteDurationLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NoteDurationLevel_descriptor(), enum_t_value);
}
inline bool NoteDurationLevel_Parse(
    const std::string& name, NoteDurationLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NoteDurationLevel>(
    NoteDurationLevel_descriptor(), name, value);
}
enum DensityLevel : int {
  DENSITY_ANY = 0,
  DENSITY_ONE = 1,
  DENSITY_TWO = 2,
  DENSITY_THREE = 3,
  DENSITY_FOUR = 4,
  DENSITY_FIVE = 5,
  DENSITY_SIX = 6,
  DENSITY_SEVEN = 7,
  DENSITY_EIGHT = 8,
  DENSITY_NINE = 9,
  DENSITY_TEN = 10
};
bool DensityLevel_IsValid(int value);
constexpr DensityLevel DensityLevel_MIN = DENSITY_ANY;
constexpr DensityLevel DensityLevel_MAX = DENSITY_TEN;
constexpr int DensityLevel_ARRAYSIZE = DensityLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DensityLevel_descriptor();
template<typename T>
inline const std::string& DensityLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DensityLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DensityLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DensityLevel_descriptor(), enum_t_value);
}
inline bool DensityLevel_Parse(
    const std::string& name, DensityLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DensityLevel>(
    DensityLevel_descriptor(), name, value);
}
// ===================================================================

class Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:midi.Event) */ {
 public:
  inline Event() : Event(nullptr) {};
  virtual ~Event();

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "midi.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_midi_2eproto);
    return ::descriptor_table_midi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kVelocityFieldNumber = 2,
    kPitchFieldNumber = 3,
    kInternalInstrumentFieldNumber = 4,
    kInternalTrackTypeFieldNumber = 10,
    kInternalDurationFieldNumber = 11,
  };
  // optional int32 time = 1 [(.midi.maxval) = 1000000, (.midi.minval) = 0];
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 velocity = 2 [(.midi.maxval) = 127, (.midi.minval) = 0];
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  ::PROTOBUF_NAMESPACE_ID::int32 velocity() const;
  void set_velocity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_velocity() const;
  void _internal_set_velocity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pitch = 3 [(.midi.maxval) = 127, (.midi.minval) = 0];
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  ::PROTOBUF_NAMESPACE_ID::int32 pitch() const;
  void set_pitch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pitch() const;
  void _internal_set_pitch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 internal_instrument = 4;
  bool has_internal_instrument() const;
  private:
  bool _internal_has_internal_instrument() const;
  public:
  void clear_internal_instrument();
  ::PROTOBUF_NAMESPACE_ID::int32 internal_instrument() const;
  void set_internal_instrument(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_internal_instrument() const;
  void _internal_set_internal_instrument(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 internal_track_type = 10;
  bool has_internal_track_type() const;
  private:
  bool _internal_has_internal_track_type() const;
  public:
  void clear_internal_track_type();
  ::PROTOBUF_NAMESPACE_ID::int32 internal_track_type() const;
  void set_internal_track_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_internal_track_type() const;
  void _internal_set_internal_track_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 internal_duration = 11;
  bool has_internal_duration() const;
  private:
  bool _internal_has_internal_duration() const;
  public:
  void clear_internal_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 internal_duration() const;
  void set_internal_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_internal_duration() const;
  void _internal_set_internal_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:midi.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 velocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 pitch_;
  ::PROTOBUF_NAMESPACE_ID::int32 internal_instrument_;
  ::PROTOBUF_NAMESPACE_ID::int32 internal_track_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 internal_duration_;
  friend struct ::TableStruct_midi_2eproto;
};
// -------------------------------------------------------------------

class Bar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:midi.Bar) */ {
 public:
  inline Bar() : Bar(nullptr) {};
  virtual ~Bar();

  Bar(const Bar& from);
  Bar(Bar&& from) noexcept
    : Bar() {
    *this = ::std::move(from);
  }

  inline Bar& operator=(const Bar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bar& operator=(Bar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bar* internal_default_instance() {
    return reinterpret_cast<const Bar*>(
               &_Bar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Bar& a, Bar& b) {
    a.Swap(&b);
  }
  inline void Swap(Bar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bar* New() const final {
    return CreateMaybeMessage<Bar>(nullptr);
  }

  Bar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bar& from);
  void MergeFrom(const Bar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "midi.Bar";
  }
  protected:
  explicit Bar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_midi_2eproto);
    return ::descriptor_table_midi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
    kInternalFeatureFieldNumber = 10,
    kInternalHasNotesFieldNumber = 3,
    kInternalBeatLengthFieldNumber = 5,
    kTsNumeratorFieldNumber = 8,
    kTsDenominatorFieldNumber = 9,
  };
  // repeated int32 events = 1 [(.midi.maxval) = 2147483647, (.midi.minval) = 0];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_events(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_events() const;
  void _internal_add_events(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_events();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 events(int index) const;
  void set_events(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_events(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_events();

  // repeated .midi.ContinuousFeature internal_feature = 10;
  int internal_feature_size() const;
  private:
  int _internal_internal_feature_size() const;
  public:
  void clear_internal_feature();
  ::midi::ContinuousFeature* mutable_internal_feature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::ContinuousFeature >*
      mutable_internal_feature();
  private:
  const ::midi::ContinuousFeature& _internal_internal_feature(int index) const;
  ::midi::ContinuousFeature* _internal_add_internal_feature();
  public:
  const ::midi::ContinuousFeature& internal_feature(int index) const;
  ::midi::ContinuousFeature* add_internal_feature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::ContinuousFeature >&
      internal_feature() const;

  // optional bool internal_has_notes = 3;
  bool has_internal_has_notes() const;
  private:
  bool _internal_has_internal_has_notes() const;
  public:
  void clear_internal_has_notes();
  bool internal_has_notes() const;
  void set_internal_has_notes(bool value);
  private:
  bool _internal_internal_has_notes() const;
  void _internal_set_internal_has_notes(bool value);
  public:

  // optional float internal_beat_length = 5;
  bool has_internal_beat_length() const;
  private:
  bool _internal_has_internal_beat_length() const;
  public:
  void clear_internal_beat_length();
  float internal_beat_length() const;
  void set_internal_beat_length(float value);
  private:
  float _internal_internal_beat_length() const;
  void _internal_set_internal_beat_length(float value);
  public:

  // optional int32 ts_numerator = 8 [(.midi.maxval) = 1000000, (.midi.minval) = 1];
  bool has_ts_numerator() const;
  private:
  bool _internal_has_ts_numerator() const;
  public:
  void clear_ts_numerator();
  ::PROTOBUF_NAMESPACE_ID::int32 ts_numerator() const;
  void set_ts_numerator(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ts_numerator() const;
  void _internal_set_ts_numerator(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ts_denominator = 9 [(.midi.maxval) = 1000000, (.midi.minval) = 1];
  bool has_ts_denominator() const;
  private:
  bool _internal_has_ts_denominator() const;
  public:
  void clear_ts_denominator();
  ::PROTOBUF_NAMESPACE_ID::int32 ts_denominator() const;
  void set_ts_denominator(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ts_denominator() const;
  void _internal_set_ts_denominator(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:midi.Bar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::ContinuousFeature > internal_feature_;
  bool internal_has_notes_;
  float internal_beat_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 ts_numerator_;
  ::PROTOBUF_NAMESPACE_ID::int32 ts_denominator_;
  friend struct ::TableStruct_midi_2eproto;
};
// -------------------------------------------------------------------

class Track PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:midi.Track) */ {
 public:
  inline Track() : Track(nullptr) {};
  virtual ~Track();

  Track(const Track& from);
  Track(Track&& from) noexcept
    : Track() {
    *this = ::std::move(from);
  }

  inline Track& operator=(const Track& from) {
    CopyFrom(from);
    return *this;
  }
  inline Track& operator=(Track&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Track& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Track* internal_default_instance() {
    return reinterpret_cast<const Track*>(
               &_Track_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Track& a, Track& b) {
    a.Swap(&b);
  }
  inline void Swap(Track* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Track* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Track* New() const final {
    return CreateMaybeMessage<Track>(nullptr);
  }

  Track* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Track>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Track& from);
  void MergeFrom(const Track& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Track* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "midi.Track";
  }
  protected:
  explicit Track(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_midi_2eproto);
    return ::descriptor_table_midi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBarsFieldNumber = 1,
    kInternalTrainTypesFieldNumber = 6,
    kInternalFeaturesFieldNumber = 7,
    kInstrumentFieldNumber = 3,
    kTrackTypeFieldNumber = 5,
  };
  // repeated .midi.Bar bars = 1;
  int bars_size() const;
  private:
  int _internal_bars_size() const;
  public:
  void clear_bars();
  ::midi::Bar* mutable_bars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::Bar >*
      mutable_bars();
  private:
  const ::midi::Bar& _internal_bars(int index) const;
  ::midi::Bar* _internal_add_bars();
  public:
  const ::midi::Bar& bars(int index) const;
  ::midi::Bar* add_bars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::Bar >&
      bars() const;

  // repeated .midi.TRACK_TYPE internal_train_types = 6;
  int internal_train_types_size() const;
  private:
  int _internal_internal_train_types_size() const;
  public:
  void clear_internal_train_types();
  private:
  ::midi::TRACK_TYPE _internal_internal_train_types(int index) const;
  void _internal_add_internal_train_types(::midi::TRACK_TYPE value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_internal_train_types();
  public:
  ::midi::TRACK_TYPE internal_train_types(int index) const;
  void set_internal_train_types(int index, ::midi::TRACK_TYPE value);
  void add_internal_train_types(::midi::TRACK_TYPE value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& internal_train_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_internal_train_types();

  // repeated .midi.TrackFeatures internal_features = 7;
  int internal_features_size() const;
  private:
  int _internal_internal_features_size() const;
  public:
  void clear_internal_features();
  ::midi::TrackFeatures* mutable_internal_features(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::TrackFeatures >*
      mutable_internal_features();
  private:
  const ::midi::TrackFeatures& _internal_internal_features(int index) const;
  ::midi::TrackFeatures* _internal_add_internal_features();
  public:
  const ::midi::TrackFeatures& internal_features(int index) const;
  ::midi::TrackFeatures* add_internal_features();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::TrackFeatures >&
      internal_features() const;

  // optional int32 instrument = 3 [(.midi.maxval) = 127, (.midi.minval) = 0];
  bool has_instrument() const;
  private:
  bool _internal_has_instrument() const;
  public:
  void clear_instrument();
  ::PROTOBUF_NAMESPACE_ID::int32 instrument() const;
  void set_instrument(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_instrument() const;
  void _internal_set_instrument(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .midi.TRACK_TYPE track_type = 5;
  bool has_track_type() const;
  private:
  bool _internal_has_track_type() const;
  public:
  void clear_track_type();
  ::midi::TRACK_TYPE track_type() const;
  void set_track_type(::midi::TRACK_TYPE value);
  private:
  ::midi::TRACK_TYPE _internal_track_type() const;
  void _internal_set_track_type(::midi::TRACK_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:midi.Track)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::Bar > bars_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> internal_train_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::TrackFeatures > internal_features_;
  ::PROTOBUF_NAMESPACE_ID::int32 instrument_;
  int track_type_;
  friend struct ::TableStruct_midi_2eproto;
};
// -------------------------------------------------------------------

class Piece PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:midi.Piece) */ {
 public:
  inline Piece() : Piece(nullptr) {};
  virtual ~Piece();

  Piece(const Piece& from);
  Piece(Piece&& from) noexcept
    : Piece() {
    *this = ::std::move(from);
  }

  inline Piece& operator=(const Piece& from) {
    CopyFrom(from);
    return *this;
  }
  inline Piece& operator=(Piece&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Piece& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Piece* internal_default_instance() {
    return reinterpret_cast<const Piece*>(
               &_Piece_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Piece& a, Piece& b) {
    a.Swap(&b);
  }
  inline void Swap(Piece* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Piece* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Piece* New() const final {
    return CreateMaybeMessage<Piece>(nullptr);
  }

  Piece* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Piece>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Piece& from);
  void MergeFrom(const Piece& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Piece* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "midi.Piece";
  }
  protected:
  explicit Piece(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_midi_2eproto);
    return ::descriptor_table_midi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTracksFieldNumber = 1,
    kEventsFieldNumber = 2,
    kInternalValidSegmentsFieldNumber = 7,
    kInternalValidTracksFieldNumber = 8,
    kInternalValidTracksV2FieldNumber = 13,
    kInternalGenreDataFieldNumber = 14,
    kResolutionFieldNumber = 3,
    kTempoFieldNumber = 4,
    kInternalSegmentLengthFieldNumber = 12,
  };
  // repeated .midi.Track tracks = 1;
  int tracks_size() const;
  private:
  int _internal_tracks_size() const;
  public:
  void clear_tracks();
  ::midi::Track* mutable_tracks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::Track >*
      mutable_tracks();
  private:
  const ::midi::Track& _internal_tracks(int index) const;
  ::midi::Track* _internal_add_tracks();
  public:
  const ::midi::Track& tracks(int index) const;
  ::midi::Track* add_tracks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::Track >&
      tracks() const;

  // repeated .midi.Event events = 2;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::midi::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::Event >*
      mutable_events();
  private:
  const ::midi::Event& _internal_events(int index) const;
  ::midi::Event* _internal_add_events();
  public:
  const ::midi::Event& events(int index) const;
  ::midi::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::Event >&
      events() const;

  // repeated int32 internal_valid_segments = 7;
  int internal_valid_segments_size() const;
  private:
  int _internal_internal_valid_segments_size() const;
  public:
  void clear_internal_valid_segments();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_internal_valid_segments(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_internal_valid_segments() const;
  void _internal_add_internal_valid_segments(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_internal_valid_segments();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 internal_valid_segments(int index) const;
  void set_internal_valid_segments(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_internal_valid_segments(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      internal_valid_segments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_internal_valid_segments();

  // repeated uint32 internal_valid_tracks = 8;
  int internal_valid_tracks_size() const;
  private:
  int _internal_internal_valid_tracks_size() const;
  public:
  void clear_internal_valid_tracks();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_internal_valid_tracks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_internal_valid_tracks() const;
  void _internal_add_internal_valid_tracks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_internal_valid_tracks();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 internal_valid_tracks(int index) const;
  void set_internal_valid_tracks(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_internal_valid_tracks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      internal_valid_tracks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_internal_valid_tracks();

  // repeated .midi.ValidTrack internal_valid_tracks_v2 = 13;
  int internal_valid_tracks_v2_size() const;
  private:
  int _internal_internal_valid_tracks_v2_size() const;
  public:
  void clear_internal_valid_tracks_v2();
  ::midi::ValidTrack* mutable_internal_valid_tracks_v2(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::ValidTrack >*
      mutable_internal_valid_tracks_v2();
  private:
  const ::midi::ValidTrack& _internal_internal_valid_tracks_v2(int index) const;
  ::midi::ValidTrack* _internal_add_internal_valid_tracks_v2();
  public:
  const ::midi::ValidTrack& internal_valid_tracks_v2(int index) const;
  ::midi::ValidTrack* add_internal_valid_tracks_v2();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::ValidTrack >&
      internal_valid_tracks_v2() const;

  // repeated .midi.GenreData internal_genre_data = 14;
  int internal_genre_data_size() const;
  private:
  int _internal_internal_genre_data_size() const;
  public:
  void clear_internal_genre_data();
  ::midi::GenreData* mutable_internal_genre_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::GenreData >*
      mutable_internal_genre_data();
  private:
  const ::midi::GenreData& _internal_internal_genre_data(int index) const;
  ::midi::GenreData* _internal_add_internal_genre_data();
  public:
  const ::midi::GenreData& internal_genre_data(int index) const;
  ::midi::GenreData* add_internal_genre_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::GenreData >&
      internal_genre_data() const;

  // optional int32 resolution = 3 [(.midi.maxval) = 12, (.midi.minval) = 1];
  bool has_resolution() const;
  private:
  bool _internal_has_resolution() const;
  public:
  void clear_resolution();
  ::PROTOBUF_NAMESPACE_ID::int32 resolution() const;
  void set_resolution(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resolution() const;
  void _internal_set_resolution(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tempo = 4 [(.midi.maxval) = 1000000, (.midi.minval) = 1];
  bool has_tempo() const;
  private:
  bool _internal_has_tempo() const;
  public:
  void clear_tempo();
  ::PROTOBUF_NAMESPACE_ID::int32 tempo() const;
  void set_tempo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tempo() const;
  void _internal_set_tempo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 internal_segment_length = 12;
  bool has_internal_segment_length() const;
  private:
  bool _internal_has_internal_segment_length() const;
  public:
  void clear_internal_segment_length();
  ::PROTOBUF_NAMESPACE_ID::int32 internal_segment_length() const;
  void set_internal_segment_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_internal_segment_length() const;
  void _internal_set_internal_segment_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:midi.Piece)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::Track > tracks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::Event > events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > internal_valid_segments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > internal_valid_tracks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::ValidTrack > internal_valid_tracks_v2_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::GenreData > internal_genre_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 resolution_;
  ::PROTOBUF_NAMESPACE_ID::int32 tempo_;
  ::PROTOBUF_NAMESPACE_ID::int32 internal_segment_length_;
  friend struct ::TableStruct_midi_2eproto;
};
// -------------------------------------------------------------------

class StatusTrack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:midi.StatusTrack) */ {
 public:
  inline StatusTrack() : StatusTrack(nullptr) {};
  virtual ~StatusTrack();

  StatusTrack(const StatusTrack& from);
  StatusTrack(StatusTrack&& from) noexcept
    : StatusTrack() {
    *this = ::std::move(from);
  }

  inline StatusTrack& operator=(const StatusTrack& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusTrack& operator=(StatusTrack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusTrack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusTrack* internal_default_instance() {
    return reinterpret_cast<const StatusTrack*>(
               &_StatusTrack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StatusTrack& a, StatusTrack& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusTrack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusTrack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusTrack* New() const final {
    return CreateMaybeMessage<StatusTrack>(nullptr);
  }

  StatusTrack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusTrack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusTrack& from);
  void MergeFrom(const StatusTrack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusTrack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "midi.StatusTrack";
  }
  protected:
  explicit StatusTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_midi_2eproto);
    return ::descriptor_table_midi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectedBarsFieldNumber = 5,
    kInternalEmbedsFieldNumber = 8,
    kInternalTsNumeratorsFieldNumber = 14,
    kInternalTsDenominatorsFieldNumber = 15,
    kInternalGenreFieldNumber = 9,
    kTrackIdFieldNumber = 1,
    kTrackTypeFieldNumber = 2,
    kInstrumentFieldNumber = 3,
    kDensityFieldNumber = 4,
    kAutoregressiveFieldNumber = 6,
    kIgnoreFieldNumber = 7,
    kMinPolyphonyQFieldNumber = 10,
    kMaxPolyphonyQFieldNumber = 11,
    kMinNoteDurationQFieldNumber = 12,
    kMaxNoteDurationQFieldNumber = 13,
    kPolyphonyHardLimitFieldNumber = 16,
    kTemperatureFieldNumber = 17,
  };
  // repeated bool selected_bars = 5;
  int selected_bars_size() const;
  private:
  int _internal_selected_bars_size() const;
  public:
  void clear_selected_bars();
  private:
  bool _internal_selected_bars(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_selected_bars() const;
  void _internal_add_selected_bars(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_selected_bars();
  public:
  bool selected_bars(int index) const;
  void set_selected_bars(int index, bool value);
  void add_selected_bars(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      selected_bars() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_selected_bars();

  // repeated .midi.ContinuousFeature internal_embeds = 8;
  int internal_embeds_size() const;
  private:
  int _internal_internal_embeds_size() const;
  public:
  void clear_internal_embeds();
  ::midi::ContinuousFeature* mutable_internal_embeds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::ContinuousFeature >*
      mutable_internal_embeds();
  private:
  const ::midi::ContinuousFeature& _internal_internal_embeds(int index) const;
  ::midi::ContinuousFeature* _internal_add_internal_embeds();
  public:
  const ::midi::ContinuousFeature& internal_embeds(int index) const;
  ::midi::ContinuousFeature* add_internal_embeds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::ContinuousFeature >&
      internal_embeds() const;

  // repeated int32 internal_ts_numerators = 14;
  int internal_ts_numerators_size() const;
  private:
  int _internal_internal_ts_numerators_size() const;
  public:
  void clear_internal_ts_numerators();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_internal_ts_numerators(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_internal_ts_numerators() const;
  void _internal_add_internal_ts_numerators(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_internal_ts_numerators();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 internal_ts_numerators(int index) const;
  void set_internal_ts_numerators(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_internal_ts_numerators(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      internal_ts_numerators() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_internal_ts_numerators();

  // repeated int32 internal_ts_denominators = 15;
  int internal_ts_denominators_size() const;
  private:
  int _internal_internal_ts_denominators_size() const;
  public:
  void clear_internal_ts_denominators();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_internal_ts_denominators(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_internal_ts_denominators() const;
  void _internal_add_internal_ts_denominators(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_internal_ts_denominators();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 internal_ts_denominators(int index) const;
  void set_internal_ts_denominators(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_internal_ts_denominators(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      internal_ts_denominators() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_internal_ts_denominators();

  // optional string internal_genre = 9;
  bool has_internal_genre() const;
  private:
  bool _internal_has_internal_genre() const;
  public:
  void clear_internal_genre();
  const std::string& internal_genre() const;
  void set_internal_genre(const std::string& value);
  void set_internal_genre(std::string&& value);
  void set_internal_genre(const char* value);
  void set_internal_genre(const char* value, size_t size);
  std::string* mutable_internal_genre();
  std::string* release_internal_genre();
  void set_allocated_internal_genre(std::string* internal_genre);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_internal_genre();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_internal_genre(
      std::string* internal_genre);
  private:
  const std::string& _internal_internal_genre() const;
  void _internal_set_internal_genre(const std::string& value);
  std::string* _internal_mutable_internal_genre();
  public:

  // optional int32 track_id = 1 [(.midi.maxval) = 1000000, (.midi.minval) = 0];
  bool has_track_id() const;
  private:
  bool _internal_has_track_id() const;
  public:
  void clear_track_id();
  ::PROTOBUF_NAMESPACE_ID::int32 track_id() const;
  void set_track_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_track_id() const;
  void _internal_set_track_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .midi.TRACK_TYPE track_type = 2;
  bool has_track_type() const;
  private:
  bool _internal_has_track_type() const;
  public:
  void clear_track_type();
  ::midi::TRACK_TYPE track_type() const;
  void set_track_type(::midi::TRACK_TYPE value);
  private:
  ::midi::TRACK_TYPE _internal_track_type() const;
  void _internal_set_track_type(::midi::TRACK_TYPE value);
  public:

  // optional .midi.GM_TYPE instrument = 3;
  bool has_instrument() const;
  private:
  bool _internal_has_instrument() const;
  public:
  void clear_instrument();
  ::midi::GM_TYPE instrument() const;
  void set_instrument(::midi::GM_TYPE value);
  private:
  ::midi::GM_TYPE _internal_instrument() const;
  void _internal_set_instrument(::midi::GM_TYPE value);
  public:

  // optional .midi.DensityLevel density = 4;
  bool has_density() const;
  private:
  bool _internal_has_density() const;
  public:
  void clear_density();
  ::midi::DensityLevel density() const;
  void set_density(::midi::DensityLevel value);
  private:
  ::midi::DensityLevel _internal_density() const;
  void _internal_set_density(::midi::DensityLevel value);
  public:

  // optional bool autoregressive = 6;
  bool has_autoregressive() const;
  private:
  bool _internal_has_autoregressive() const;
  public:
  void clear_autoregressive();
  bool autoregressive() const;
  void set_autoregressive(bool value);
  private:
  bool _internal_autoregressive() const;
  void _internal_set_autoregressive(bool value);
  public:

  // optional bool ignore = 7;
  bool has_ignore() const;
  private:
  bool _internal_has_ignore() const;
  public:
  void clear_ignore();
  bool ignore() const;
  void set_ignore(bool value);
  private:
  bool _internal_ignore() const;
  void _internal_set_ignore(bool value);
  public:

  // optional .midi.PolyphonyLevel min_polyphony_q = 10;
  bool has_min_polyphony_q() const;
  private:
  bool _internal_has_min_polyphony_q() const;
  public:
  void clear_min_polyphony_q();
  ::midi::PolyphonyLevel min_polyphony_q() const;
  void set_min_polyphony_q(::midi::PolyphonyLevel value);
  private:
  ::midi::PolyphonyLevel _internal_min_polyphony_q() const;
  void _internal_set_min_polyphony_q(::midi::PolyphonyLevel value);
  public:

  // optional .midi.PolyphonyLevel max_polyphony_q = 11;
  bool has_max_polyphony_q() const;
  private:
  bool _internal_has_max_polyphony_q() const;
  public:
  void clear_max_polyphony_q();
  ::midi::PolyphonyLevel max_polyphony_q() const;
  void set_max_polyphony_q(::midi::PolyphonyLevel value);
  private:
  ::midi::PolyphonyLevel _internal_max_polyphony_q() const;
  void _internal_set_max_polyphony_q(::midi::PolyphonyLevel value);
  public:

  // optional .midi.NoteDurationLevel min_note_duration_q = 12;
  bool has_min_note_duration_q() const;
  private:
  bool _internal_has_min_note_duration_q() const;
  public:
  void clear_min_note_duration_q();
  ::midi::NoteDurationLevel min_note_duration_q() const;
  void set_min_note_duration_q(::midi::NoteDurationLevel value);
  private:
  ::midi::NoteDurationLevel _internal_min_note_duration_q() const;
  void _internal_set_min_note_duration_q(::midi::NoteDurationLevel value);
  public:

  // optional .midi.NoteDurationLevel max_note_duration_q = 13;
  bool has_max_note_duration_q() const;
  private:
  bool _internal_has_max_note_duration_q() const;
  public:
  void clear_max_note_duration_q();
  ::midi::NoteDurationLevel max_note_duration_q() const;
  void set_max_note_duration_q(::midi::NoteDurationLevel value);
  private:
  ::midi::NoteDurationLevel _internal_max_note_duration_q() const;
  void _internal_set_max_note_duration_q(::midi::NoteDurationLevel value);
  public:

  // optional int32 polyphony_hard_limit = 16 [(.midi.maxval) = 100, (.midi.minval) = 0];
  bool has_polyphony_hard_limit() const;
  private:
  bool _internal_has_polyphony_hard_limit() const;
  public:
  void clear_polyphony_hard_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 polyphony_hard_limit() const;
  void set_polyphony_hard_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_polyphony_hard_limit() const;
  void _internal_set_polyphony_hard_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float temperature = 17 [(.midi.fmaxval) = 2, (.midi.fminval) = 0.5];
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);
  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);
  public:

  // @@protoc_insertion_point(class_scope:midi.StatusTrack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > selected_bars_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::ContinuousFeature > internal_embeds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > internal_ts_numerators_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > internal_ts_denominators_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr internal_genre_;
  ::PROTOBUF_NAMESPACE_ID::int32 track_id_;
  int track_type_;
  int instrument_;
  int density_;
  bool autoregressive_;
  bool ignore_;
  int min_polyphony_q_;
  int max_polyphony_q_;
  int min_note_duration_q_;
  int max_note_duration_q_;
  ::PROTOBUF_NAMESPACE_ID::int32 polyphony_hard_limit_;
  float temperature_;
  friend struct ::TableStruct_midi_2eproto;
};
// -------------------------------------------------------------------

class Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:midi.Status) */ {
 public:
  inline Status() : Status(nullptr) {};
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "midi.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_midi_2eproto);
    return ::descriptor_table_midi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTracksFieldNumber = 1,
  };
  // repeated .midi.StatusTrack tracks = 1;
  int tracks_size() const;
  private:
  int _internal_tracks_size() const;
  public:
  void clear_tracks();
  ::midi::StatusTrack* mutable_tracks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::StatusTrack >*
      mutable_tracks();
  private:
  const ::midi::StatusTrack& _internal_tracks(int index) const;
  ::midi::StatusTrack* _internal_add_tracks();
  public:
  const ::midi::StatusTrack& tracks(int index) const;
  ::midi::StatusTrack* add_tracks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::StatusTrack >&
      tracks() const;

  // @@protoc_insertion_point(class_scope:midi.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::StatusTrack > tracks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_midi_2eproto;
};
// -------------------------------------------------------------------

class SampleParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:midi.SampleParam) */ {
 public:
  inline SampleParam() : SampleParam(nullptr) {};
  virtual ~SampleParam();

  SampleParam(const SampleParam& from);
  SampleParam(SampleParam&& from) noexcept
    : SampleParam() {
    *this = ::std::move(from);
  }

  inline SampleParam& operator=(const SampleParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline SampleParam& operator=(SampleParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SampleParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SampleParam* internal_default_instance() {
    return reinterpret_cast<const SampleParam*>(
               &_SampleParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SampleParam& a, SampleParam& b) {
    a.Swap(&b);
  }
  inline void Swap(SampleParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SampleParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SampleParam* New() const final {
    return CreateMaybeMessage<SampleParam>(nullptr);
  }

  SampleParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SampleParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SampleParam& from);
  void MergeFrom(const SampleParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SampleParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "midi.SampleParam";
  }
  protected:
  explicit SampleParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_midi_2eproto);
    return ::descriptor_table_midi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCkptFieldNumber = 9,
    kTracksPerStepFieldNumber = 1,
    kBarsPerStepFieldNumber = 2,
    kModelDimFieldNumber = 3,
    kPercentageFieldNumber = 5,
    kTemperatureFieldNumber = 6,
    kBatchSizeFieldNumber = 7,
    kUsePerTrackTemperatureFieldNumber = 17,
    kShuffleFieldNumber = 4,
    kVerboseFieldNumber = 8,
    kInternalSkipPreprocessFieldNumber = 12,
    kMaxStepsFieldNumber = 13,
    kInternalRandomSampleModeFieldNumber = 15,
    kInternalDisableMaskingFieldNumber = 16,
  };
  // optional string ckpt = 9;
  bool has_ckpt() const;
  private:
  bool _internal_has_ckpt() const;
  public:
  void clear_ckpt();
  const std::string& ckpt() const;
  void set_ckpt(const std::string& value);
  void set_ckpt(std::string&& value);
  void set_ckpt(const char* value);
  void set_ckpt(const char* value, size_t size);
  std::string* mutable_ckpt();
  std::string* release_ckpt();
  void set_allocated_ckpt(std::string* ckpt);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ckpt();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ckpt(
      std::string* ckpt);
  private:
  const std::string& _internal_ckpt() const;
  void _internal_set_ckpt(const std::string& value);
  std::string* _internal_mutable_ckpt();
  public:

  // optional int32 tracks_per_step = 1 [(.midi.maxval) = 12, (.midi.minval) = 1];
  bool has_tracks_per_step() const;
  private:
  bool _internal_has_tracks_per_step() const;
  public:
  void clear_tracks_per_step();
  ::PROTOBUF_NAMESPACE_ID::int32 tracks_per_step() const;
  void set_tracks_per_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tracks_per_step() const;
  void _internal_set_tracks_per_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 bars_per_step = 2 [(.midi.maxval) = 8, (.midi.minval) = 1];
  bool has_bars_per_step() const;
  private:
  bool _internal_has_bars_per_step() const;
  public:
  void clear_bars_per_step();
  ::PROTOBUF_NAMESPACE_ID::int32 bars_per_step() const;
  void set_bars_per_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bars_per_step() const;
  void _internal_set_bars_per_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 model_dim = 3 [(.midi.maxval) = 8, (.midi.minval) = 1];
  bool has_model_dim() const;
  private:
  bool _internal_has_model_dim() const;
  public:
  void clear_model_dim();
  ::PROTOBUF_NAMESPACE_ID::int32 model_dim() const;
  void set_model_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_dim() const;
  void _internal_set_model_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 percentage = 5 [(.midi.maxval) = 100, (.midi.minval) = 1];
  bool has_percentage() const;
  private:
  bool _internal_has_percentage() const;
  public:
  void clear_percentage();
  ::PROTOBUF_NAMESPACE_ID::int32 percentage() const;
  void set_percentage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_percentage() const;
  void _internal_set_percentage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float temperature = 6 [(.midi.fmaxval) = 2, (.midi.fminval) = 0.5];
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);
  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);
  public:

  // optional int32 batch_size = 7 [(.midi.maxval) = 1, (.midi.minval) = 1];
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::int32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool use_per_track_temperature = 17;
  bool has_use_per_track_temperature() const;
  private:
  bool _internal_has_use_per_track_temperature() const;
  public:
  void clear_use_per_track_temperature();
  bool use_per_track_temperature() const;
  void set_use_per_track_temperature(bool value);
  private:
  bool _internal_use_per_track_temperature() const;
  void _internal_set_use_per_track_temperature(bool value);
  public:

  // optional bool shuffle = 4;
  bool has_shuffle() const;
  private:
  bool _internal_has_shuffle() const;
  public:
  void clear_shuffle();
  bool shuffle() const;
  void set_shuffle(bool value);
  private:
  bool _internal_shuffle() const;
  void _internal_set_shuffle(bool value);
  public:

  // optional bool verbose = 8;
  bool has_verbose() const;
  private:
  bool _internal_has_verbose() const;
  public:
  void clear_verbose();
  bool verbose() const;
  void set_verbose(bool value);
  private:
  bool _internal_verbose() const;
  void _internal_set_verbose(bool value);
  public:

  // optional bool internal_skip_preprocess = 12;
  bool has_internal_skip_preprocess() const;
  private:
  bool _internal_has_internal_skip_preprocess() const;
  public:
  void clear_internal_skip_preprocess();
  bool internal_skip_preprocess() const;
  void set_internal_skip_preprocess(bool value);
  private:
  bool _internal_internal_skip_preprocess() const;
  void _internal_set_internal_skip_preprocess(bool value);
  public:

  // optional int32 max_steps = 13 [(.midi.maxval) = 2048, (.midi.minval) = 0];
  bool has_max_steps() const;
  private:
  bool _internal_has_max_steps() const;
  public:
  void clear_max_steps();
  ::PROTOBUF_NAMESPACE_ID::int32 max_steps() const;
  void set_max_steps(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_steps() const;
  void _internal_set_max_steps(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool internal_random_sample_mode = 15;
  bool has_internal_random_sample_mode() const;
  private:
  bool _internal_has_internal_random_sample_mode() const;
  public:
  void clear_internal_random_sample_mode();
  bool internal_random_sample_mode() const;
  void set_internal_random_sample_mode(bool value);
  private:
  bool _internal_internal_random_sample_mode() const;
  void _internal_set_internal_random_sample_mode(bool value);
  public:

  // optional bool internal_disable_masking = 16;
  bool has_internal_disable_masking() const;
  private:
  bool _internal_has_internal_disable_masking() const;
  public:
  void clear_internal_disable_masking();
  bool internal_disable_masking() const;
  void set_internal_disable_masking(bool value);
  private:
  bool _internal_internal_disable_masking() const;
  void _internal_set_internal_disable_masking(bool value);
  public:

  // @@protoc_insertion_point(class_scope:midi.SampleParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ckpt_;
  ::PROTOBUF_NAMESPACE_ID::int32 tracks_per_step_;
  ::PROTOBUF_NAMESPACE_ID::int32 bars_per_step_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_dim_;
  ::PROTOBUF_NAMESPACE_ID::int32 percentage_;
  float temperature_;
  ::PROTOBUF_NAMESPACE_ID::int32 batch_size_;
  bool use_per_track_temperature_;
  bool shuffle_;
  bool verbose_;
  bool internal_skip_preprocess_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_steps_;
  bool internal_random_sample_mode_;
  bool internal_disable_masking_;
  friend struct ::TableStruct_midi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event

// optional int32 time = 1 [(.midi.maxval) = 1000000, (.midi.minval) = 0];
inline bool Event::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Event::has_time() const {
  return _internal_has_time();
}
inline void Event::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Event::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Event::time() const {
  // @@protoc_insertion_point(field_get:midi.Event.time)
  return _internal_time();
}
inline void Event::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
}
inline void Event::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:midi.Event.time)
}

// optional int32 velocity = 2 [(.midi.maxval) = 127, (.midi.minval) = 0];
inline bool Event::_internal_has_velocity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Event::has_velocity() const {
  return _internal_has_velocity();
}
inline void Event::clear_velocity() {
  velocity_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Event::_internal_velocity() const {
  return velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Event::velocity() const {
  // @@protoc_insertion_point(field_get:midi.Event.velocity)
  return _internal_velocity();
}
inline void Event::_internal_set_velocity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  velocity_ = value;
}
inline void Event::set_velocity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:midi.Event.velocity)
}

// optional int32 pitch = 3 [(.midi.maxval) = 127, (.midi.minval) = 0];
inline bool Event::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Event::has_pitch() const {
  return _internal_has_pitch();
}
inline void Event::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Event::_internal_pitch() const {
  return pitch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Event::pitch() const {
  // @@protoc_insertion_point(field_get:midi.Event.pitch)
  return _internal_pitch();
}
inline void Event::_internal_set_pitch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  pitch_ = value;
}
inline void Event::set_pitch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:midi.Event.pitch)
}

// optional int32 internal_instrument = 4;
inline bool Event::_internal_has_internal_instrument() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Event::has_internal_instrument() const {
  return _internal_has_internal_instrument();
}
inline void Event::clear_internal_instrument() {
  internal_instrument_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Event::_internal_internal_instrument() const {
  return internal_instrument_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Event::internal_instrument() const {
  // @@protoc_insertion_point(field_get:midi.Event.internal_instrument)
  return _internal_internal_instrument();
}
inline void Event::_internal_set_internal_instrument(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  internal_instrument_ = value;
}
inline void Event::set_internal_instrument(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_internal_instrument(value);
  // @@protoc_insertion_point(field_set:midi.Event.internal_instrument)
}

// optional int32 internal_track_type = 10;
inline bool Event::_internal_has_internal_track_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Event::has_internal_track_type() const {
  return _internal_has_internal_track_type();
}
inline void Event::clear_internal_track_type() {
  internal_track_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Event::_internal_internal_track_type() const {
  return internal_track_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Event::internal_track_type() const {
  // @@protoc_insertion_point(field_get:midi.Event.internal_track_type)
  return _internal_internal_track_type();
}
inline void Event::_internal_set_internal_track_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  internal_track_type_ = value;
}
inline void Event::set_internal_track_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_internal_track_type(value);
  // @@protoc_insertion_point(field_set:midi.Event.internal_track_type)
}

// optional int32 internal_duration = 11;
inline bool Event::_internal_has_internal_duration() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Event::has_internal_duration() const {
  return _internal_has_internal_duration();
}
inline void Event::clear_internal_duration() {
  internal_duration_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Event::_internal_internal_duration() const {
  return internal_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Event::internal_duration() const {
  // @@protoc_insertion_point(field_get:midi.Event.internal_duration)
  return _internal_internal_duration();
}
inline void Event::_internal_set_internal_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  internal_duration_ = value;
}
inline void Event::set_internal_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_internal_duration(value);
  // @@protoc_insertion_point(field_set:midi.Event.internal_duration)
}

// -------------------------------------------------------------------

// Bar

// repeated int32 events = 1 [(.midi.maxval) = 2147483647, (.midi.minval) = 0];
inline int Bar::_internal_events_size() const {
  return events_.size();
}
inline int Bar::events_size() const {
  return _internal_events_size();
}
inline void Bar::clear_events() {
  events_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bar::_internal_events(int index) const {
  return events_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bar::events(int index) const {
  // @@protoc_insertion_point(field_get:midi.Bar.events)
  return _internal_events(index);
}
inline void Bar::set_events(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  events_.Set(index, value);
  // @@protoc_insertion_point(field_set:midi.Bar.events)
}
inline void Bar::_internal_add_events(::PROTOBUF_NAMESPACE_ID::int32 value) {
  events_.Add(value);
}
inline void Bar::add_events(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_events(value);
  // @@protoc_insertion_point(field_add:midi.Bar.events)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Bar::_internal_events() const {
  return events_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Bar::events() const {
  // @@protoc_insertion_point(field_list:midi.Bar.events)
  return _internal_events();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Bar::_internal_mutable_events() {
  return &events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Bar::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:midi.Bar.events)
  return _internal_mutable_events();
}

// optional int32 ts_numerator = 8 [(.midi.maxval) = 1000000, (.midi.minval) = 1];
inline bool Bar::_internal_has_ts_numerator() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Bar::has_ts_numerator() const {
  return _internal_has_ts_numerator();
}
inline void Bar::clear_ts_numerator() {
  ts_numerator_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bar::_internal_ts_numerator() const {
  return ts_numerator_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bar::ts_numerator() const {
  // @@protoc_insertion_point(field_get:midi.Bar.ts_numerator)
  return _internal_ts_numerator();
}
inline void Bar::_internal_set_ts_numerator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  ts_numerator_ = value;
}
inline void Bar::set_ts_numerator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ts_numerator(value);
  // @@protoc_insertion_point(field_set:midi.Bar.ts_numerator)
}

// optional int32 ts_denominator = 9 [(.midi.maxval) = 1000000, (.midi.minval) = 1];
inline bool Bar::_internal_has_ts_denominator() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Bar::has_ts_denominator() const {
  return _internal_has_ts_denominator();
}
inline void Bar::clear_ts_denominator() {
  ts_denominator_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bar::_internal_ts_denominator() const {
  return ts_denominator_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bar::ts_denominator() const {
  // @@protoc_insertion_point(field_get:midi.Bar.ts_denominator)
  return _internal_ts_denominator();
}
inline void Bar::_internal_set_ts_denominator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  ts_denominator_ = value;
}
inline void Bar::set_ts_denominator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ts_denominator(value);
  // @@protoc_insertion_point(field_set:midi.Bar.ts_denominator)
}

// optional float internal_beat_length = 5;
inline bool Bar::_internal_has_internal_beat_length() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Bar::has_internal_beat_length() const {
  return _internal_has_internal_beat_length();
}
inline void Bar::clear_internal_beat_length() {
  internal_beat_length_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Bar::_internal_internal_beat_length() const {
  return internal_beat_length_;
}
inline float Bar::internal_beat_length() const {
  // @@protoc_insertion_point(field_get:midi.Bar.internal_beat_length)
  return _internal_internal_beat_length();
}
inline void Bar::_internal_set_internal_beat_length(float value) {
  _has_bits_[0] |= 0x00000002u;
  internal_beat_length_ = value;
}
inline void Bar::set_internal_beat_length(float value) {
  _internal_set_internal_beat_length(value);
  // @@protoc_insertion_point(field_set:midi.Bar.internal_beat_length)
}

// optional bool internal_has_notes = 3;
inline bool Bar::_internal_has_internal_has_notes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Bar::has_internal_has_notes() const {
  return _internal_has_internal_has_notes();
}
inline void Bar::clear_internal_has_notes() {
  internal_has_notes_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Bar::_internal_internal_has_notes() const {
  return internal_has_notes_;
}
inline bool Bar::internal_has_notes() const {
  // @@protoc_insertion_point(field_get:midi.Bar.internal_has_notes)
  return _internal_internal_has_notes();
}
inline void Bar::_internal_set_internal_has_notes(bool value) {
  _has_bits_[0] |= 0x00000001u;
  internal_has_notes_ = value;
}
inline void Bar::set_internal_has_notes(bool value) {
  _internal_set_internal_has_notes(value);
  // @@protoc_insertion_point(field_set:midi.Bar.internal_has_notes)
}

// repeated .midi.ContinuousFeature internal_feature = 10;
inline int Bar::_internal_internal_feature_size() const {
  return internal_feature_.size();
}
inline int Bar::internal_feature_size() const {
  return _internal_internal_feature_size();
}
inline ::midi::ContinuousFeature* Bar::mutable_internal_feature(int index) {
  // @@protoc_insertion_point(field_mutable:midi.Bar.internal_feature)
  return internal_feature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::ContinuousFeature >*
Bar::mutable_internal_feature() {
  // @@protoc_insertion_point(field_mutable_list:midi.Bar.internal_feature)
  return &internal_feature_;
}
inline const ::midi::ContinuousFeature& Bar::_internal_internal_feature(int index) const {
  return internal_feature_.Get(index);
}
inline const ::midi::ContinuousFeature& Bar::internal_feature(int index) const {
  // @@protoc_insertion_point(field_get:midi.Bar.internal_feature)
  return _internal_internal_feature(index);
}
inline ::midi::ContinuousFeature* Bar::_internal_add_internal_feature() {
  return internal_feature_.Add();
}
inline ::midi::ContinuousFeature* Bar::add_internal_feature() {
  // @@protoc_insertion_point(field_add:midi.Bar.internal_feature)
  return _internal_add_internal_feature();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::ContinuousFeature >&
Bar::internal_feature() const {
  // @@protoc_insertion_point(field_list:midi.Bar.internal_feature)
  return internal_feature_;
}

// -------------------------------------------------------------------

// Track

// repeated .midi.Bar bars = 1;
inline int Track::_internal_bars_size() const {
  return bars_.size();
}
inline int Track::bars_size() const {
  return _internal_bars_size();
}
inline void Track::clear_bars() {
  bars_.Clear();
}
inline ::midi::Bar* Track::mutable_bars(int index) {
  // @@protoc_insertion_point(field_mutable:midi.Track.bars)
  return bars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::Bar >*
Track::mutable_bars() {
  // @@protoc_insertion_point(field_mutable_list:midi.Track.bars)
  return &bars_;
}
inline const ::midi::Bar& Track::_internal_bars(int index) const {
  return bars_.Get(index);
}
inline const ::midi::Bar& Track::bars(int index) const {
  // @@protoc_insertion_point(field_get:midi.Track.bars)
  return _internal_bars(index);
}
inline ::midi::Bar* Track::_internal_add_bars() {
  return bars_.Add();
}
inline ::midi::Bar* Track::add_bars() {
  // @@protoc_insertion_point(field_add:midi.Track.bars)
  return _internal_add_bars();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::Bar >&
Track::bars() const {
  // @@protoc_insertion_point(field_list:midi.Track.bars)
  return bars_;
}

// optional int32 instrument = 3 [(.midi.maxval) = 127, (.midi.minval) = 0];
inline bool Track::_internal_has_instrument() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Track::has_instrument() const {
  return _internal_has_instrument();
}
inline void Track::clear_instrument() {
  instrument_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Track::_internal_instrument() const {
  return instrument_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Track::instrument() const {
  // @@protoc_insertion_point(field_get:midi.Track.instrument)
  return _internal_instrument();
}
inline void Track::_internal_set_instrument(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  instrument_ = value;
}
inline void Track::set_instrument(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_instrument(value);
  // @@protoc_insertion_point(field_set:midi.Track.instrument)
}

// optional .midi.TRACK_TYPE track_type = 5;
inline bool Track::_internal_has_track_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Track::has_track_type() const {
  return _internal_has_track_type();
}
inline void Track::clear_track_type() {
  track_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::midi::TRACK_TYPE Track::_internal_track_type() const {
  return static_cast< ::midi::TRACK_TYPE >(track_type_);
}
inline ::midi::TRACK_TYPE Track::track_type() const {
  // @@protoc_insertion_point(field_get:midi.Track.track_type)
  return _internal_track_type();
}
inline void Track::_internal_set_track_type(::midi::TRACK_TYPE value) {
  assert(::midi::TRACK_TYPE_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  track_type_ = value;
}
inline void Track::set_track_type(::midi::TRACK_TYPE value) {
  _internal_set_track_type(value);
  // @@protoc_insertion_point(field_set:midi.Track.track_type)
}

// repeated .midi.TRACK_TYPE internal_train_types = 6;
inline int Track::_internal_internal_train_types_size() const {
  return internal_train_types_.size();
}
inline int Track::internal_train_types_size() const {
  return _internal_internal_train_types_size();
}
inline void Track::clear_internal_train_types() {
  internal_train_types_.Clear();
}
inline ::midi::TRACK_TYPE Track::_internal_internal_train_types(int index) const {
  return static_cast< ::midi::TRACK_TYPE >(internal_train_types_.Get(index));
}
inline ::midi::TRACK_TYPE Track::internal_train_types(int index) const {
  // @@protoc_insertion_point(field_get:midi.Track.internal_train_types)
  return _internal_internal_train_types(index);
}
inline void Track::set_internal_train_types(int index, ::midi::TRACK_TYPE value) {
  assert(::midi::TRACK_TYPE_IsValid(value));
  internal_train_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:midi.Track.internal_train_types)
}
inline void Track::_internal_add_internal_train_types(::midi::TRACK_TYPE value) {
  assert(::midi::TRACK_TYPE_IsValid(value));
  internal_train_types_.Add(value);
}
inline void Track::add_internal_train_types(::midi::TRACK_TYPE value) {
  // @@protoc_insertion_point(field_add:midi.Track.internal_train_types)
  _internal_add_internal_train_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Track::internal_train_types() const {
  // @@protoc_insertion_point(field_list:midi.Track.internal_train_types)
  return internal_train_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Track::_internal_mutable_internal_train_types() {
  return &internal_train_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Track::mutable_internal_train_types() {
  // @@protoc_insertion_point(field_mutable_list:midi.Track.internal_train_types)
  return _internal_mutable_internal_train_types();
}

// repeated .midi.TrackFeatures internal_features = 7;
inline int Track::_internal_internal_features_size() const {
  return internal_features_.size();
}
inline int Track::internal_features_size() const {
  return _internal_internal_features_size();
}
inline ::midi::TrackFeatures* Track::mutable_internal_features(int index) {
  // @@protoc_insertion_point(field_mutable:midi.Track.internal_features)
  return internal_features_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::TrackFeatures >*
Track::mutable_internal_features() {
  // @@protoc_insertion_point(field_mutable_list:midi.Track.internal_features)
  return &internal_features_;
}
inline const ::midi::TrackFeatures& Track::_internal_internal_features(int index) const {
  return internal_features_.Get(index);
}
inline const ::midi::TrackFeatures& Track::internal_features(int index) const {
  // @@protoc_insertion_point(field_get:midi.Track.internal_features)
  return _internal_internal_features(index);
}
inline ::midi::TrackFeatures* Track::_internal_add_internal_features() {
  return internal_features_.Add();
}
inline ::midi::TrackFeatures* Track::add_internal_features() {
  // @@protoc_insertion_point(field_add:midi.Track.internal_features)
  return _internal_add_internal_features();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::TrackFeatures >&
Track::internal_features() const {
  // @@protoc_insertion_point(field_list:midi.Track.internal_features)
  return internal_features_;
}

// -------------------------------------------------------------------

// Piece

// repeated .midi.Track tracks = 1;
inline int Piece::_internal_tracks_size() const {
  return tracks_.size();
}
inline int Piece::tracks_size() const {
  return _internal_tracks_size();
}
inline void Piece::clear_tracks() {
  tracks_.Clear();
}
inline ::midi::Track* Piece::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:midi.Piece.tracks)
  return tracks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::Track >*
Piece::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:midi.Piece.tracks)
  return &tracks_;
}
inline const ::midi::Track& Piece::_internal_tracks(int index) const {
  return tracks_.Get(index);
}
inline const ::midi::Track& Piece::tracks(int index) const {
  // @@protoc_insertion_point(field_get:midi.Piece.tracks)
  return _internal_tracks(index);
}
inline ::midi::Track* Piece::_internal_add_tracks() {
  return tracks_.Add();
}
inline ::midi::Track* Piece::add_tracks() {
  // @@protoc_insertion_point(field_add:midi.Piece.tracks)
  return _internal_add_tracks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::Track >&
Piece::tracks() const {
  // @@protoc_insertion_point(field_list:midi.Piece.tracks)
  return tracks_;
}

// repeated .midi.Event events = 2;
inline int Piece::_internal_events_size() const {
  return events_.size();
}
inline int Piece::events_size() const {
  return _internal_events_size();
}
inline void Piece::clear_events() {
  events_.Clear();
}
inline ::midi::Event* Piece::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:midi.Piece.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::Event >*
Piece::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:midi.Piece.events)
  return &events_;
}
inline const ::midi::Event& Piece::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::midi::Event& Piece::events(int index) const {
  // @@protoc_insertion_point(field_get:midi.Piece.events)
  return _internal_events(index);
}
inline ::midi::Event* Piece::_internal_add_events() {
  return events_.Add();
}
inline ::midi::Event* Piece::add_events() {
  // @@protoc_insertion_point(field_add:midi.Piece.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::Event >&
Piece::events() const {
  // @@protoc_insertion_point(field_list:midi.Piece.events)
  return events_;
}

// optional int32 resolution = 3 [(.midi.maxval) = 12, (.midi.minval) = 1];
inline bool Piece::_internal_has_resolution() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Piece::has_resolution() const {
  return _internal_has_resolution();
}
inline void Piece::clear_resolution() {
  resolution_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Piece::_internal_resolution() const {
  return resolution_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Piece::resolution() const {
  // @@protoc_insertion_point(field_get:midi.Piece.resolution)
  return _internal_resolution();
}
inline void Piece::_internal_set_resolution(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  resolution_ = value;
}
inline void Piece::set_resolution(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:midi.Piece.resolution)
}

// optional int32 tempo = 4 [(.midi.maxval) = 1000000, (.midi.minval) = 1];
inline bool Piece::_internal_has_tempo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Piece::has_tempo() const {
  return _internal_has_tempo();
}
inline void Piece::clear_tempo() {
  tempo_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Piece::_internal_tempo() const {
  return tempo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Piece::tempo() const {
  // @@protoc_insertion_point(field_get:midi.Piece.tempo)
  return _internal_tempo();
}
inline void Piece::_internal_set_tempo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  tempo_ = value;
}
inline void Piece::set_tempo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tempo(value);
  // @@protoc_insertion_point(field_set:midi.Piece.tempo)
}

// repeated int32 internal_valid_segments = 7;
inline int Piece::_internal_internal_valid_segments_size() const {
  return internal_valid_segments_.size();
}
inline int Piece::internal_valid_segments_size() const {
  return _internal_internal_valid_segments_size();
}
inline void Piece::clear_internal_valid_segments() {
  internal_valid_segments_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Piece::_internal_internal_valid_segments(int index) const {
  return internal_valid_segments_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Piece::internal_valid_segments(int index) const {
  // @@protoc_insertion_point(field_get:midi.Piece.internal_valid_segments)
  return _internal_internal_valid_segments(index);
}
inline void Piece::set_internal_valid_segments(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  internal_valid_segments_.Set(index, value);
  // @@protoc_insertion_point(field_set:midi.Piece.internal_valid_segments)
}
inline void Piece::_internal_add_internal_valid_segments(::PROTOBUF_NAMESPACE_ID::int32 value) {
  internal_valid_segments_.Add(value);
}
inline void Piece::add_internal_valid_segments(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_internal_valid_segments(value);
  // @@protoc_insertion_point(field_add:midi.Piece.internal_valid_segments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Piece::_internal_internal_valid_segments() const {
  return internal_valid_segments_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Piece::internal_valid_segments() const {
  // @@protoc_insertion_point(field_list:midi.Piece.internal_valid_segments)
  return _internal_internal_valid_segments();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Piece::_internal_mutable_internal_valid_segments() {
  return &internal_valid_segments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Piece::mutable_internal_valid_segments() {
  // @@protoc_insertion_point(field_mutable_list:midi.Piece.internal_valid_segments)
  return _internal_mutable_internal_valid_segments();
}

// repeated uint32 internal_valid_tracks = 8;
inline int Piece::_internal_internal_valid_tracks_size() const {
  return internal_valid_tracks_.size();
}
inline int Piece::internal_valid_tracks_size() const {
  return _internal_internal_valid_tracks_size();
}
inline void Piece::clear_internal_valid_tracks() {
  internal_valid_tracks_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Piece::_internal_internal_valid_tracks(int index) const {
  return internal_valid_tracks_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Piece::internal_valid_tracks(int index) const {
  // @@protoc_insertion_point(field_get:midi.Piece.internal_valid_tracks)
  return _internal_internal_valid_tracks(index);
}
inline void Piece::set_internal_valid_tracks(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  internal_valid_tracks_.Set(index, value);
  // @@protoc_insertion_point(field_set:midi.Piece.internal_valid_tracks)
}
inline void Piece::_internal_add_internal_valid_tracks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  internal_valid_tracks_.Add(value);
}
inline void Piece::add_internal_valid_tracks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_internal_valid_tracks(value);
  // @@protoc_insertion_point(field_add:midi.Piece.internal_valid_tracks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Piece::_internal_internal_valid_tracks() const {
  return internal_valid_tracks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Piece::internal_valid_tracks() const {
  // @@protoc_insertion_point(field_list:midi.Piece.internal_valid_tracks)
  return _internal_internal_valid_tracks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Piece::_internal_mutable_internal_valid_tracks() {
  return &internal_valid_tracks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Piece::mutable_internal_valid_tracks() {
  // @@protoc_insertion_point(field_mutable_list:midi.Piece.internal_valid_tracks)
  return _internal_mutable_internal_valid_tracks();
}

// optional int32 internal_segment_length = 12;
inline bool Piece::_internal_has_internal_segment_length() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Piece::has_internal_segment_length() const {
  return _internal_has_internal_segment_length();
}
inline void Piece::clear_internal_segment_length() {
  internal_segment_length_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Piece::_internal_internal_segment_length() const {
  return internal_segment_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Piece::internal_segment_length() const {
  // @@protoc_insertion_point(field_get:midi.Piece.internal_segment_length)
  return _internal_internal_segment_length();
}
inline void Piece::_internal_set_internal_segment_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  internal_segment_length_ = value;
}
inline void Piece::set_internal_segment_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_internal_segment_length(value);
  // @@protoc_insertion_point(field_set:midi.Piece.internal_segment_length)
}

// repeated .midi.ValidTrack internal_valid_tracks_v2 = 13;
inline int Piece::_internal_internal_valid_tracks_v2_size() const {
  return internal_valid_tracks_v2_.size();
}
inline int Piece::internal_valid_tracks_v2_size() const {
  return _internal_internal_valid_tracks_v2_size();
}
inline ::midi::ValidTrack* Piece::mutable_internal_valid_tracks_v2(int index) {
  // @@protoc_insertion_point(field_mutable:midi.Piece.internal_valid_tracks_v2)
  return internal_valid_tracks_v2_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::ValidTrack >*
Piece::mutable_internal_valid_tracks_v2() {
  // @@protoc_insertion_point(field_mutable_list:midi.Piece.internal_valid_tracks_v2)
  return &internal_valid_tracks_v2_;
}
inline const ::midi::ValidTrack& Piece::_internal_internal_valid_tracks_v2(int index) const {
  return internal_valid_tracks_v2_.Get(index);
}
inline const ::midi::ValidTrack& Piece::internal_valid_tracks_v2(int index) const {
  // @@protoc_insertion_point(field_get:midi.Piece.internal_valid_tracks_v2)
  return _internal_internal_valid_tracks_v2(index);
}
inline ::midi::ValidTrack* Piece::_internal_add_internal_valid_tracks_v2() {
  return internal_valid_tracks_v2_.Add();
}
inline ::midi::ValidTrack* Piece::add_internal_valid_tracks_v2() {
  // @@protoc_insertion_point(field_add:midi.Piece.internal_valid_tracks_v2)
  return _internal_add_internal_valid_tracks_v2();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::ValidTrack >&
Piece::internal_valid_tracks_v2() const {
  // @@protoc_insertion_point(field_list:midi.Piece.internal_valid_tracks_v2)
  return internal_valid_tracks_v2_;
}

// repeated .midi.GenreData internal_genre_data = 14;
inline int Piece::_internal_internal_genre_data_size() const {
  return internal_genre_data_.size();
}
inline int Piece::internal_genre_data_size() const {
  return _internal_internal_genre_data_size();
}
inline ::midi::GenreData* Piece::mutable_internal_genre_data(int index) {
  // @@protoc_insertion_point(field_mutable:midi.Piece.internal_genre_data)
  return internal_genre_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::GenreData >*
Piece::mutable_internal_genre_data() {
  // @@protoc_insertion_point(field_mutable_list:midi.Piece.internal_genre_data)
  return &internal_genre_data_;
}
inline const ::midi::GenreData& Piece::_internal_internal_genre_data(int index) const {
  return internal_genre_data_.Get(index);
}
inline const ::midi::GenreData& Piece::internal_genre_data(int index) const {
  // @@protoc_insertion_point(field_get:midi.Piece.internal_genre_data)
  return _internal_internal_genre_data(index);
}
inline ::midi::GenreData* Piece::_internal_add_internal_genre_data() {
  return internal_genre_data_.Add();
}
inline ::midi::GenreData* Piece::add_internal_genre_data() {
  // @@protoc_insertion_point(field_add:midi.Piece.internal_genre_data)
  return _internal_add_internal_genre_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::GenreData >&
Piece::internal_genre_data() const {
  // @@protoc_insertion_point(field_list:midi.Piece.internal_genre_data)
  return internal_genre_data_;
}

// -------------------------------------------------------------------

// StatusTrack

// optional int32 track_id = 1 [(.midi.maxval) = 1000000, (.midi.minval) = 0];
inline bool StatusTrack::_internal_has_track_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StatusTrack::has_track_id() const {
  return _internal_has_track_id();
}
inline void StatusTrack::clear_track_id() {
  track_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusTrack::_internal_track_id() const {
  return track_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusTrack::track_id() const {
  // @@protoc_insertion_point(field_get:midi.StatusTrack.track_id)
  return _internal_track_id();
}
inline void StatusTrack::_internal_set_track_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  track_id_ = value;
}
inline void StatusTrack::set_track_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_track_id(value);
  // @@protoc_insertion_point(field_set:midi.StatusTrack.track_id)
}

// optional .midi.TRACK_TYPE track_type = 2;
inline bool StatusTrack::_internal_has_track_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StatusTrack::has_track_type() const {
  return _internal_has_track_type();
}
inline void StatusTrack::clear_track_type() {
  track_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::midi::TRACK_TYPE StatusTrack::_internal_track_type() const {
  return static_cast< ::midi::TRACK_TYPE >(track_type_);
}
inline ::midi::TRACK_TYPE StatusTrack::track_type() const {
  // @@protoc_insertion_point(field_get:midi.StatusTrack.track_type)
  return _internal_track_type();
}
inline void StatusTrack::_internal_set_track_type(::midi::TRACK_TYPE value) {
  assert(::midi::TRACK_TYPE_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  track_type_ = value;
}
inline void StatusTrack::set_track_type(::midi::TRACK_TYPE value) {
  _internal_set_track_type(value);
  // @@protoc_insertion_point(field_set:midi.StatusTrack.track_type)
}

// optional .midi.GM_TYPE instrument = 3;
inline bool StatusTrack::_internal_has_instrument() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StatusTrack::has_instrument() const {
  return _internal_has_instrument();
}
inline void StatusTrack::clear_instrument() {
  instrument_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::midi::GM_TYPE StatusTrack::_internal_instrument() const {
  return static_cast< ::midi::GM_TYPE >(instrument_);
}
inline ::midi::GM_TYPE StatusTrack::instrument() const {
  // @@protoc_insertion_point(field_get:midi.StatusTrack.instrument)
  return _internal_instrument();
}
inline void StatusTrack::_internal_set_instrument(::midi::GM_TYPE value) {
  assert(::midi::GM_TYPE_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  instrument_ = value;
}
inline void StatusTrack::set_instrument(::midi::GM_TYPE value) {
  _internal_set_instrument(value);
  // @@protoc_insertion_point(field_set:midi.StatusTrack.instrument)
}

// repeated bool selected_bars = 5;
inline int StatusTrack::_internal_selected_bars_size() const {
  return selected_bars_.size();
}
inline int StatusTrack::selected_bars_size() const {
  return _internal_selected_bars_size();
}
inline void StatusTrack::clear_selected_bars() {
  selected_bars_.Clear();
}
inline bool StatusTrack::_internal_selected_bars(int index) const {
  return selected_bars_.Get(index);
}
inline bool StatusTrack::selected_bars(int index) const {
  // @@protoc_insertion_point(field_get:midi.StatusTrack.selected_bars)
  return _internal_selected_bars(index);
}
inline void StatusTrack::set_selected_bars(int index, bool value) {
  selected_bars_.Set(index, value);
  // @@protoc_insertion_point(field_set:midi.StatusTrack.selected_bars)
}
inline void StatusTrack::_internal_add_selected_bars(bool value) {
  selected_bars_.Add(value);
}
inline void StatusTrack::add_selected_bars(bool value) {
  _internal_add_selected_bars(value);
  // @@protoc_insertion_point(field_add:midi.StatusTrack.selected_bars)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
StatusTrack::_internal_selected_bars() const {
  return selected_bars_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
StatusTrack::selected_bars() const {
  // @@protoc_insertion_point(field_list:midi.StatusTrack.selected_bars)
  return _internal_selected_bars();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
StatusTrack::_internal_mutable_selected_bars() {
  return &selected_bars_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
StatusTrack::mutable_selected_bars() {
  // @@protoc_insertion_point(field_mutable_list:midi.StatusTrack.selected_bars)
  return _internal_mutable_selected_bars();
}

// optional bool autoregressive = 6;
inline bool StatusTrack::_internal_has_autoregressive() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StatusTrack::has_autoregressive() const {
  return _internal_has_autoregressive();
}
inline void StatusTrack::clear_autoregressive() {
  autoregressive_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool StatusTrack::_internal_autoregressive() const {
  return autoregressive_;
}
inline bool StatusTrack::autoregressive() const {
  // @@protoc_insertion_point(field_get:midi.StatusTrack.autoregressive)
  return _internal_autoregressive();
}
inline void StatusTrack::_internal_set_autoregressive(bool value) {
  _has_bits_[0] |= 0x00000020u;
  autoregressive_ = value;
}
inline void StatusTrack::set_autoregressive(bool value) {
  _internal_set_autoregressive(value);
  // @@protoc_insertion_point(field_set:midi.StatusTrack.autoregressive)
}

// optional bool ignore = 7;
inline bool StatusTrack::_internal_has_ignore() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool StatusTrack::has_ignore() const {
  return _internal_has_ignore();
}
inline void StatusTrack::clear_ignore() {
  ignore_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool StatusTrack::_internal_ignore() const {
  return ignore_;
}
inline bool StatusTrack::ignore() const {
  // @@protoc_insertion_point(field_get:midi.StatusTrack.ignore)
  return _internal_ignore();
}
inline void StatusTrack::_internal_set_ignore(bool value) {
  _has_bits_[0] |= 0x00000040u;
  ignore_ = value;
}
inline void StatusTrack::set_ignore(bool value) {
  _internal_set_ignore(value);
  // @@protoc_insertion_point(field_set:midi.StatusTrack.ignore)
}

// optional .midi.DensityLevel density = 4;
inline bool StatusTrack::_internal_has_density() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StatusTrack::has_density() const {
  return _internal_has_density();
}
inline void StatusTrack::clear_density() {
  density_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::midi::DensityLevel StatusTrack::_internal_density() const {
  return static_cast< ::midi::DensityLevel >(density_);
}
inline ::midi::DensityLevel StatusTrack::density() const {
  // @@protoc_insertion_point(field_get:midi.StatusTrack.density)
  return _internal_density();
}
inline void StatusTrack::_internal_set_density(::midi::DensityLevel value) {
  assert(::midi::DensityLevel_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  density_ = value;
}
inline void StatusTrack::set_density(::midi::DensityLevel value) {
  _internal_set_density(value);
  // @@protoc_insertion_point(field_set:midi.StatusTrack.density)
}

// optional .midi.PolyphonyLevel min_polyphony_q = 10;
inline bool StatusTrack::_internal_has_min_polyphony_q() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool StatusTrack::has_min_polyphony_q() const {
  return _internal_has_min_polyphony_q();
}
inline void StatusTrack::clear_min_polyphony_q() {
  min_polyphony_q_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::midi::PolyphonyLevel StatusTrack::_internal_min_polyphony_q() const {
  return static_cast< ::midi::PolyphonyLevel >(min_polyphony_q_);
}
inline ::midi::PolyphonyLevel StatusTrack::min_polyphony_q() const {
  // @@protoc_insertion_point(field_get:midi.StatusTrack.min_polyphony_q)
  return _internal_min_polyphony_q();
}
inline void StatusTrack::_internal_set_min_polyphony_q(::midi::PolyphonyLevel value) {
  assert(::midi::PolyphonyLevel_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  min_polyphony_q_ = value;
}
inline void StatusTrack::set_min_polyphony_q(::midi::PolyphonyLevel value) {
  _internal_set_min_polyphony_q(value);
  // @@protoc_insertion_point(field_set:midi.StatusTrack.min_polyphony_q)
}

// optional .midi.PolyphonyLevel max_polyphony_q = 11;
inline bool StatusTrack::_internal_has_max_polyphony_q() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool StatusTrack::has_max_polyphony_q() const {
  return _internal_has_max_polyphony_q();
}
inline void StatusTrack::clear_max_polyphony_q() {
  max_polyphony_q_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::midi::PolyphonyLevel StatusTrack::_internal_max_polyphony_q() const {
  return static_cast< ::midi::PolyphonyLevel >(max_polyphony_q_);
}
inline ::midi::PolyphonyLevel StatusTrack::max_polyphony_q() const {
  // @@protoc_insertion_point(field_get:midi.StatusTrack.max_polyphony_q)
  return _internal_max_polyphony_q();
}
inline void StatusTrack::_internal_set_max_polyphony_q(::midi::PolyphonyLevel value) {
  assert(::midi::PolyphonyLevel_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  max_polyphony_q_ = value;
}
inline void StatusTrack::set_max_polyphony_q(::midi::PolyphonyLevel value) {
  _internal_set_max_polyphony_q(value);
  // @@protoc_insertion_point(field_set:midi.StatusTrack.max_polyphony_q)
}

// optional .midi.NoteDurationLevel min_note_duration_q = 12;
inline bool StatusTrack::_internal_has_min_note_duration_q() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool StatusTrack::has_min_note_duration_q() const {
  return _internal_has_min_note_duration_q();
}
inline void StatusTrack::clear_min_note_duration_q() {
  min_note_duration_q_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::midi::NoteDurationLevel StatusTrack::_internal_min_note_duration_q() const {
  return static_cast< ::midi::NoteDurationLevel >(min_note_duration_q_);
}
inline ::midi::NoteDurationLevel StatusTrack::min_note_duration_q() const {
  // @@protoc_insertion_point(field_get:midi.StatusTrack.min_note_duration_q)
  return _internal_min_note_duration_q();
}
inline void StatusTrack::_internal_set_min_note_duration_q(::midi::NoteDurationLevel value) {
  assert(::midi::NoteDurationLevel_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  min_note_duration_q_ = value;
}
inline void StatusTrack::set_min_note_duration_q(::midi::NoteDurationLevel value) {
  _internal_set_min_note_duration_q(value);
  // @@protoc_insertion_point(field_set:midi.StatusTrack.min_note_duration_q)
}

// optional .midi.NoteDurationLevel max_note_duration_q = 13;
inline bool StatusTrack::_internal_has_max_note_duration_q() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool StatusTrack::has_max_note_duration_q() const {
  return _internal_has_max_note_duration_q();
}
inline void StatusTrack::clear_max_note_duration_q() {
  max_note_duration_q_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::midi::NoteDurationLevel StatusTrack::_internal_max_note_duration_q() const {
  return static_cast< ::midi::NoteDurationLevel >(max_note_duration_q_);
}
inline ::midi::NoteDurationLevel StatusTrack::max_note_duration_q() const {
  // @@protoc_insertion_point(field_get:midi.StatusTrack.max_note_duration_q)
  return _internal_max_note_duration_q();
}
inline void StatusTrack::_internal_set_max_note_duration_q(::midi::NoteDurationLevel value) {
  assert(::midi::NoteDurationLevel_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  max_note_duration_q_ = value;
}
inline void StatusTrack::set_max_note_duration_q(::midi::NoteDurationLevel value) {
  _internal_set_max_note_duration_q(value);
  // @@protoc_insertion_point(field_set:midi.StatusTrack.max_note_duration_q)
}

// optional int32 polyphony_hard_limit = 16 [(.midi.maxval) = 100, (.midi.minval) = 0];
inline bool StatusTrack::_internal_has_polyphony_hard_limit() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool StatusTrack::has_polyphony_hard_limit() const {
  return _internal_has_polyphony_hard_limit();
}
inline void StatusTrack::clear_polyphony_hard_limit() {
  polyphony_hard_limit_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusTrack::_internal_polyphony_hard_limit() const {
  return polyphony_hard_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusTrack::polyphony_hard_limit() const {
  // @@protoc_insertion_point(field_get:midi.StatusTrack.polyphony_hard_limit)
  return _internal_polyphony_hard_limit();
}
inline void StatusTrack::_internal_set_polyphony_hard_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  polyphony_hard_limit_ = value;
}
inline void StatusTrack::set_polyphony_hard_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_polyphony_hard_limit(value);
  // @@protoc_insertion_point(field_set:midi.StatusTrack.polyphony_hard_limit)
}

// optional float temperature = 17 [(.midi.fmaxval) = 2, (.midi.fminval) = 0.5];
inline bool StatusTrack::_internal_has_temperature() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool StatusTrack::has_temperature() const {
  return _internal_has_temperature();
}
inline void StatusTrack::clear_temperature() {
  temperature_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float StatusTrack::_internal_temperature() const {
  return temperature_;
}
inline float StatusTrack::temperature() const {
  // @@protoc_insertion_point(field_get:midi.StatusTrack.temperature)
  return _internal_temperature();
}
inline void StatusTrack::_internal_set_temperature(float value) {
  _has_bits_[0] |= 0x00001000u;
  temperature_ = value;
}
inline void StatusTrack::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:midi.StatusTrack.temperature)
}

// repeated int32 internal_ts_numerators = 14;
inline int StatusTrack::_internal_internal_ts_numerators_size() const {
  return internal_ts_numerators_.size();
}
inline int StatusTrack::internal_ts_numerators_size() const {
  return _internal_internal_ts_numerators_size();
}
inline void StatusTrack::clear_internal_ts_numerators() {
  internal_ts_numerators_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusTrack::_internal_internal_ts_numerators(int index) const {
  return internal_ts_numerators_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusTrack::internal_ts_numerators(int index) const {
  // @@protoc_insertion_point(field_get:midi.StatusTrack.internal_ts_numerators)
  return _internal_internal_ts_numerators(index);
}
inline void StatusTrack::set_internal_ts_numerators(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  internal_ts_numerators_.Set(index, value);
  // @@protoc_insertion_point(field_set:midi.StatusTrack.internal_ts_numerators)
}
inline void StatusTrack::_internal_add_internal_ts_numerators(::PROTOBUF_NAMESPACE_ID::int32 value) {
  internal_ts_numerators_.Add(value);
}
inline void StatusTrack::add_internal_ts_numerators(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_internal_ts_numerators(value);
  // @@protoc_insertion_point(field_add:midi.StatusTrack.internal_ts_numerators)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
StatusTrack::_internal_internal_ts_numerators() const {
  return internal_ts_numerators_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
StatusTrack::internal_ts_numerators() const {
  // @@protoc_insertion_point(field_list:midi.StatusTrack.internal_ts_numerators)
  return _internal_internal_ts_numerators();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
StatusTrack::_internal_mutable_internal_ts_numerators() {
  return &internal_ts_numerators_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
StatusTrack::mutable_internal_ts_numerators() {
  // @@protoc_insertion_point(field_mutable_list:midi.StatusTrack.internal_ts_numerators)
  return _internal_mutable_internal_ts_numerators();
}

// repeated int32 internal_ts_denominators = 15;
inline int StatusTrack::_internal_internal_ts_denominators_size() const {
  return internal_ts_denominators_.size();
}
inline int StatusTrack::internal_ts_denominators_size() const {
  return _internal_internal_ts_denominators_size();
}
inline void StatusTrack::clear_internal_ts_denominators() {
  internal_ts_denominators_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusTrack::_internal_internal_ts_denominators(int index) const {
  return internal_ts_denominators_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusTrack::internal_ts_denominators(int index) const {
  // @@protoc_insertion_point(field_get:midi.StatusTrack.internal_ts_denominators)
  return _internal_internal_ts_denominators(index);
}
inline void StatusTrack::set_internal_ts_denominators(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  internal_ts_denominators_.Set(index, value);
  // @@protoc_insertion_point(field_set:midi.StatusTrack.internal_ts_denominators)
}
inline void StatusTrack::_internal_add_internal_ts_denominators(::PROTOBUF_NAMESPACE_ID::int32 value) {
  internal_ts_denominators_.Add(value);
}
inline void StatusTrack::add_internal_ts_denominators(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_internal_ts_denominators(value);
  // @@protoc_insertion_point(field_add:midi.StatusTrack.internal_ts_denominators)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
StatusTrack::_internal_internal_ts_denominators() const {
  return internal_ts_denominators_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
StatusTrack::internal_ts_denominators() const {
  // @@protoc_insertion_point(field_list:midi.StatusTrack.internal_ts_denominators)
  return _internal_internal_ts_denominators();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
StatusTrack::_internal_mutable_internal_ts_denominators() {
  return &internal_ts_denominators_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
StatusTrack::mutable_internal_ts_denominators() {
  // @@protoc_insertion_point(field_mutable_list:midi.StatusTrack.internal_ts_denominators)
  return _internal_mutable_internal_ts_denominators();
}

// repeated .midi.ContinuousFeature internal_embeds = 8;
inline int StatusTrack::_internal_internal_embeds_size() const {
  return internal_embeds_.size();
}
inline int StatusTrack::internal_embeds_size() const {
  return _internal_internal_embeds_size();
}
inline ::midi::ContinuousFeature* StatusTrack::mutable_internal_embeds(int index) {
  // @@protoc_insertion_point(field_mutable:midi.StatusTrack.internal_embeds)
  return internal_embeds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::ContinuousFeature >*
StatusTrack::mutable_internal_embeds() {
  // @@protoc_insertion_point(field_mutable_list:midi.StatusTrack.internal_embeds)
  return &internal_embeds_;
}
inline const ::midi::ContinuousFeature& StatusTrack::_internal_internal_embeds(int index) const {
  return internal_embeds_.Get(index);
}
inline const ::midi::ContinuousFeature& StatusTrack::internal_embeds(int index) const {
  // @@protoc_insertion_point(field_get:midi.StatusTrack.internal_embeds)
  return _internal_internal_embeds(index);
}
inline ::midi::ContinuousFeature* StatusTrack::_internal_add_internal_embeds() {
  return internal_embeds_.Add();
}
inline ::midi::ContinuousFeature* StatusTrack::add_internal_embeds() {
  // @@protoc_insertion_point(field_add:midi.StatusTrack.internal_embeds)
  return _internal_add_internal_embeds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::ContinuousFeature >&
StatusTrack::internal_embeds() const {
  // @@protoc_insertion_point(field_list:midi.StatusTrack.internal_embeds)
  return internal_embeds_;
}

// optional string internal_genre = 9;
inline bool StatusTrack::_internal_has_internal_genre() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StatusTrack::has_internal_genre() const {
  return _internal_has_internal_genre();
}
inline void StatusTrack::clear_internal_genre() {
  internal_genre_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StatusTrack::internal_genre() const {
  // @@protoc_insertion_point(field_get:midi.StatusTrack.internal_genre)
  return _internal_internal_genre();
}
inline void StatusTrack::set_internal_genre(const std::string& value) {
  _internal_set_internal_genre(value);
  // @@protoc_insertion_point(field_set:midi.StatusTrack.internal_genre)
}
inline std::string* StatusTrack::mutable_internal_genre() {
  // @@protoc_insertion_point(field_mutable:midi.StatusTrack.internal_genre)
  return _internal_mutable_internal_genre();
}
inline const std::string& StatusTrack::_internal_internal_genre() const {
  return internal_genre_.Get();
}
inline void StatusTrack::_internal_set_internal_genre(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  internal_genre_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatusTrack::set_internal_genre(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  internal_genre_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:midi.StatusTrack.internal_genre)
}
inline void StatusTrack::set_internal_genre(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  internal_genre_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:midi.StatusTrack.internal_genre)
}
inline void StatusTrack::set_internal_genre(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  internal_genre_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:midi.StatusTrack.internal_genre)
}
inline std::string* StatusTrack::_internal_mutable_internal_genre() {
  _has_bits_[0] |= 0x00000001u;
  return internal_genre_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatusTrack::release_internal_genre() {
  // @@protoc_insertion_point(field_release:midi.StatusTrack.internal_genre)
  if (!_internal_has_internal_genre()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return internal_genre_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatusTrack::set_allocated_internal_genre(std::string* internal_genre) {
  if (internal_genre != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  internal_genre_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), internal_genre,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:midi.StatusTrack.internal_genre)
}
inline std::string* StatusTrack::unsafe_arena_release_internal_genre() {
  // @@protoc_insertion_point(field_unsafe_arena_release:midi.StatusTrack.internal_genre)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return internal_genre_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatusTrack::unsafe_arena_set_allocated_internal_genre(
    std::string* internal_genre) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (internal_genre != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  internal_genre_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      internal_genre, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:midi.StatusTrack.internal_genre)
}

// -------------------------------------------------------------------

// Status

// repeated .midi.StatusTrack tracks = 1;
inline int Status::_internal_tracks_size() const {
  return tracks_.size();
}
inline int Status::tracks_size() const {
  return _internal_tracks_size();
}
inline void Status::clear_tracks() {
  tracks_.Clear();
}
inline ::midi::StatusTrack* Status::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:midi.Status.tracks)
  return tracks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::StatusTrack >*
Status::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:midi.Status.tracks)
  return &tracks_;
}
inline const ::midi::StatusTrack& Status::_internal_tracks(int index) const {
  return tracks_.Get(index);
}
inline const ::midi::StatusTrack& Status::tracks(int index) const {
  // @@protoc_insertion_point(field_get:midi.Status.tracks)
  return _internal_tracks(index);
}
inline ::midi::StatusTrack* Status::_internal_add_tracks() {
  return tracks_.Add();
}
inline ::midi::StatusTrack* Status::add_tracks() {
  // @@protoc_insertion_point(field_add:midi.Status.tracks)
  return _internal_add_tracks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::midi::StatusTrack >&
Status::tracks() const {
  // @@protoc_insertion_point(field_list:midi.Status.tracks)
  return tracks_;
}

// -------------------------------------------------------------------

// SampleParam

// optional int32 tracks_per_step = 1 [(.midi.maxval) = 12, (.midi.minval) = 1];
inline bool SampleParam::_internal_has_tracks_per_step() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SampleParam::has_tracks_per_step() const {
  return _internal_has_tracks_per_step();
}
inline void SampleParam::clear_tracks_per_step() {
  tracks_per_step_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SampleParam::_internal_tracks_per_step() const {
  return tracks_per_step_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SampleParam::tracks_per_step() const {
  // @@protoc_insertion_point(field_get:midi.SampleParam.tracks_per_step)
  return _internal_tracks_per_step();
}
inline void SampleParam::_internal_set_tracks_per_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  tracks_per_step_ = value;
}
inline void SampleParam::set_tracks_per_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tracks_per_step(value);
  // @@protoc_insertion_point(field_set:midi.SampleParam.tracks_per_step)
}

// optional int32 bars_per_step = 2 [(.midi.maxval) = 8, (.midi.minval) = 1];
inline bool SampleParam::_internal_has_bars_per_step() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SampleParam::has_bars_per_step() const {
  return _internal_has_bars_per_step();
}
inline void SampleParam::clear_bars_per_step() {
  bars_per_step_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SampleParam::_internal_bars_per_step() const {
  return bars_per_step_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SampleParam::bars_per_step() const {
  // @@protoc_insertion_point(field_get:midi.SampleParam.bars_per_step)
  return _internal_bars_per_step();
}
inline void SampleParam::_internal_set_bars_per_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  bars_per_step_ = value;
}
inline void SampleParam::set_bars_per_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bars_per_step(value);
  // @@protoc_insertion_point(field_set:midi.SampleParam.bars_per_step)
}

// optional int32 model_dim = 3 [(.midi.maxval) = 8, (.midi.minval) = 1];
inline bool SampleParam::_internal_has_model_dim() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SampleParam::has_model_dim() const {
  return _internal_has_model_dim();
}
inline void SampleParam::clear_model_dim() {
  model_dim_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SampleParam::_internal_model_dim() const {
  return model_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SampleParam::model_dim() const {
  // @@protoc_insertion_point(field_get:midi.SampleParam.model_dim)
  return _internal_model_dim();
}
inline void SampleParam::_internal_set_model_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  model_dim_ = value;
}
inline void SampleParam::set_model_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_dim(value);
  // @@protoc_insertion_point(field_set:midi.SampleParam.model_dim)
}

// optional int32 percentage = 5 [(.midi.maxval) = 100, (.midi.minval) = 1];
inline bool SampleParam::_internal_has_percentage() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SampleParam::has_percentage() const {
  return _internal_has_percentage();
}
inline void SampleParam::clear_percentage() {
  percentage_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SampleParam::_internal_percentage() const {
  return percentage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SampleParam::percentage() const {
  // @@protoc_insertion_point(field_get:midi.SampleParam.percentage)
  return _internal_percentage();
}
inline void SampleParam::_internal_set_percentage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  percentage_ = value;
}
inline void SampleParam::set_percentage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_percentage(value);
  // @@protoc_insertion_point(field_set:midi.SampleParam.percentage)
}

// optional int32 batch_size = 7 [(.midi.maxval) = 1, (.midi.minval) = 1];
inline bool SampleParam::_internal_has_batch_size() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SampleParam::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void SampleParam::clear_batch_size() {
  batch_size_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SampleParam::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SampleParam::batch_size() const {
  // @@protoc_insertion_point(field_get:midi.SampleParam.batch_size)
  return _internal_batch_size();
}
inline void SampleParam::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  batch_size_ = value;
}
inline void SampleParam::set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:midi.SampleParam.batch_size)
}

// optional float temperature = 6 [(.midi.fmaxval) = 2, (.midi.fminval) = 0.5];
inline bool SampleParam::_internal_has_temperature() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SampleParam::has_temperature() const {
  return _internal_has_temperature();
}
inline void SampleParam::clear_temperature() {
  temperature_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float SampleParam::_internal_temperature() const {
  return temperature_;
}
inline float SampleParam::temperature() const {
  // @@protoc_insertion_point(field_get:midi.SampleParam.temperature)
  return _internal_temperature();
}
inline void SampleParam::_internal_set_temperature(float value) {
  _has_bits_[0] |= 0x00000020u;
  temperature_ = value;
}
inline void SampleParam::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:midi.SampleParam.temperature)
}

// optional bool use_per_track_temperature = 17;
inline bool SampleParam::_internal_has_use_per_track_temperature() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SampleParam::has_use_per_track_temperature() const {
  return _internal_has_use_per_track_temperature();
}
inline void SampleParam::clear_use_per_track_temperature() {
  use_per_track_temperature_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool SampleParam::_internal_use_per_track_temperature() const {
  return use_per_track_temperature_;
}
inline bool SampleParam::use_per_track_temperature() const {
  // @@protoc_insertion_point(field_get:midi.SampleParam.use_per_track_temperature)
  return _internal_use_per_track_temperature();
}
inline void SampleParam::_internal_set_use_per_track_temperature(bool value) {
  _has_bits_[0] |= 0x00000080u;
  use_per_track_temperature_ = value;
}
inline void SampleParam::set_use_per_track_temperature(bool value) {
  _internal_set_use_per_track_temperature(value);
  // @@protoc_insertion_point(field_set:midi.SampleParam.use_per_track_temperature)
}

// optional int32 max_steps = 13 [(.midi.maxval) = 2048, (.midi.minval) = 0];
inline bool SampleParam::_internal_has_max_steps() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SampleParam::has_max_steps() const {
  return _internal_has_max_steps();
}
inline void SampleParam::clear_max_steps() {
  max_steps_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SampleParam::_internal_max_steps() const {
  return max_steps_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SampleParam::max_steps() const {
  // @@protoc_insertion_point(field_get:midi.SampleParam.max_steps)
  return _internal_max_steps();
}
inline void SampleParam::_internal_set_max_steps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  max_steps_ = value;
}
inline void SampleParam::set_max_steps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_steps(value);
  // @@protoc_insertion_point(field_set:midi.SampleParam.max_steps)
}

// optional bool shuffle = 4;
inline bool SampleParam::_internal_has_shuffle() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SampleParam::has_shuffle() const {
  return _internal_has_shuffle();
}
inline void SampleParam::clear_shuffle() {
  shuffle_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool SampleParam::_internal_shuffle() const {
  return shuffle_;
}
inline bool SampleParam::shuffle() const {
  // @@protoc_insertion_point(field_get:midi.SampleParam.shuffle)
  return _internal_shuffle();
}
inline void SampleParam::_internal_set_shuffle(bool value) {
  _has_bits_[0] |= 0x00000100u;
  shuffle_ = value;
}
inline void SampleParam::set_shuffle(bool value) {
  _internal_set_shuffle(value);
  // @@protoc_insertion_point(field_set:midi.SampleParam.shuffle)
}

// optional bool verbose = 8;
inline bool SampleParam::_internal_has_verbose() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SampleParam::has_verbose() const {
  return _internal_has_verbose();
}
inline void SampleParam::clear_verbose() {
  verbose_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool SampleParam::_internal_verbose() const {
  return verbose_;
}
inline bool SampleParam::verbose() const {
  // @@protoc_insertion_point(field_get:midi.SampleParam.verbose)
  return _internal_verbose();
}
inline void SampleParam::_internal_set_verbose(bool value) {
  _has_bits_[0] |= 0x00000200u;
  verbose_ = value;
}
inline void SampleParam::set_verbose(bool value) {
  _internal_set_verbose(value);
  // @@protoc_insertion_point(field_set:midi.SampleParam.verbose)
}

// optional string ckpt = 9;
inline bool SampleParam::_internal_has_ckpt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SampleParam::has_ckpt() const {
  return _internal_has_ckpt();
}
inline void SampleParam::clear_ckpt() {
  ckpt_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SampleParam::ckpt() const {
  // @@protoc_insertion_point(field_get:midi.SampleParam.ckpt)
  return _internal_ckpt();
}
inline void SampleParam::set_ckpt(const std::string& value) {
  _internal_set_ckpt(value);
  // @@protoc_insertion_point(field_set:midi.SampleParam.ckpt)
}
inline std::string* SampleParam::mutable_ckpt() {
  // @@protoc_insertion_point(field_mutable:midi.SampleParam.ckpt)
  return _internal_mutable_ckpt();
}
inline const std::string& SampleParam::_internal_ckpt() const {
  return ckpt_.Get();
}
inline void SampleParam::_internal_set_ckpt(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ckpt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SampleParam::set_ckpt(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ckpt_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:midi.SampleParam.ckpt)
}
inline void SampleParam::set_ckpt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ckpt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:midi.SampleParam.ckpt)
}
inline void SampleParam::set_ckpt(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ckpt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:midi.SampleParam.ckpt)
}
inline std::string* SampleParam::_internal_mutable_ckpt() {
  _has_bits_[0] |= 0x00000001u;
  return ckpt_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SampleParam::release_ckpt() {
  // @@protoc_insertion_point(field_release:midi.SampleParam.ckpt)
  if (!_internal_has_ckpt()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ckpt_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SampleParam::set_allocated_ckpt(std::string* ckpt) {
  if (ckpt != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ckpt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ckpt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:midi.SampleParam.ckpt)
}
inline std::string* SampleParam::unsafe_arena_release_ckpt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:midi.SampleParam.ckpt)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return ckpt_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SampleParam::unsafe_arena_set_allocated_ckpt(
    std::string* ckpt) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ckpt != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ckpt_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ckpt, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:midi.SampleParam.ckpt)
}

// optional bool internal_skip_preprocess = 12;
inline bool SampleParam::_internal_has_internal_skip_preprocess() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SampleParam::has_internal_skip_preprocess() const {
  return _internal_has_internal_skip_preprocess();
}
inline void SampleParam::clear_internal_skip_preprocess() {
  internal_skip_preprocess_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool SampleParam::_internal_internal_skip_preprocess() const {
  return internal_skip_preprocess_;
}
inline bool SampleParam::internal_skip_preprocess() const {
  // @@protoc_insertion_point(field_get:midi.SampleParam.internal_skip_preprocess)
  return _internal_internal_skip_preprocess();
}
inline void SampleParam::_internal_set_internal_skip_preprocess(bool value) {
  _has_bits_[0] |= 0x00000400u;
  internal_skip_preprocess_ = value;
}
inline void SampleParam::set_internal_skip_preprocess(bool value) {
  _internal_set_internal_skip_preprocess(value);
  // @@protoc_insertion_point(field_set:midi.SampleParam.internal_skip_preprocess)
}

// optional bool internal_random_sample_mode = 15;
inline bool SampleParam::_internal_has_internal_random_sample_mode() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SampleParam::has_internal_random_sample_mode() const {
  return _internal_has_internal_random_sample_mode();
}
inline void SampleParam::clear_internal_random_sample_mode() {
  internal_random_sample_mode_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool SampleParam::_internal_internal_random_sample_mode() const {
  return internal_random_sample_mode_;
}
inline bool SampleParam::internal_random_sample_mode() const {
  // @@protoc_insertion_point(field_get:midi.SampleParam.internal_random_sample_mode)
  return _internal_internal_random_sample_mode();
}
inline void SampleParam::_internal_set_internal_random_sample_mode(bool value) {
  _has_bits_[0] |= 0x00001000u;
  internal_random_sample_mode_ = value;
}
inline void SampleParam::set_internal_random_sample_mode(bool value) {
  _internal_set_internal_random_sample_mode(value);
  // @@protoc_insertion_point(field_set:midi.SampleParam.internal_random_sample_mode)
}

// optional bool internal_disable_masking = 16;
inline bool SampleParam::_internal_has_internal_disable_masking() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SampleParam::has_internal_disable_masking() const {
  return _internal_has_internal_disable_masking();
}
inline void SampleParam::clear_internal_disable_masking() {
  internal_disable_masking_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool SampleParam::_internal_internal_disable_masking() const {
  return internal_disable_masking_;
}
inline bool SampleParam::internal_disable_masking() const {
  // @@protoc_insertion_point(field_get:midi.SampleParam.internal_disable_masking)
  return _internal_internal_disable_masking();
}
inline void SampleParam::_internal_set_internal_disable_masking(bool value) {
  _has_bits_[0] |= 0x00002000u;
  internal_disable_masking_ = value;
}
inline void SampleParam::set_internal_disable_masking(bool value) {
  _internal_set_internal_disable_masking(value);
  // @@protoc_insertion_point(field_set:midi.SampleParam.internal_disable_masking)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace midi

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::midi::PolyphonyLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::midi::PolyphonyLevel>() {
  return ::midi::PolyphonyLevel_descriptor();
}
template <> struct is_proto_enum< ::midi::NoteDurationLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::midi::NoteDurationLevel>() {
  return ::midi::NoteDurationLevel_descriptor();
}
template <> struct is_proto_enum< ::midi::DensityLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::midi::DensityLevel>() {
  return ::midi::DensityLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_midi_2eproto
